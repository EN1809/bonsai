
in vec2 gBufferUV;
out vec4 OutColor;


uniform sampler2D gColor;
uniform sampler2D gPosition;
uniform sampler2D gNormal;

uniform sampler2D BloomTex;
uniform sampler2D LightingTex;
uniform sampler2D shadowMap;
uniform sampler2D Ssao;


uniform mat4 ShadowMVP;
uniform vec3 CameraP;

int AoBlurSize = 4; // size of AO noise texture
float BlurredAO = 0.0f;

// Tuning
  float gamma = 2.2f;
//

void main()
{
  vec2 gBufferTextureDim = vec2(SCR_WIDTH, SCR_HEIGHT);
  ivec2 texelCoord = ivec2(gBufferUV*gBufferTextureDim);
  vec4 FragPosition = texelFetch(gPosition, texelCoord, 0);

  vec3 ToneMapped;

  vec3 Diffuse       = texelFetch(gColor, texelCoord, 0).rgb;
  vec3 FragNormal    = texelFetch(gNormal, texelCoord, 0).rgb;
  /* vec3 FragNormal = texture(gNormal, gBufferUV).rgb; */
  vec3 Lighting      = texture(LightingTex, gBufferUV).rgb;
  vec3 Bloom         = texture(BloomTex, gBufferUV).rgb;

#if USE_SSAO_SHADER
  vec2 texelSize = 1.0 / vec2(textureSize(Ssao, 0));
  float AccumAO = 0.0;

  vec2 hlim = vec2(float(-AoBlurSize) * 0.5 + 0.5);

  for (int i = 0; i < AoBlurSize; ++i) {
     for (int j = 0; j < AoBlurSize; ++j) {
        vec2 TexOffset = (hlim + vec2(float(i), float(j))) * texelSize;
        AccumAO += texture(Ssao, gBufferUV + TexOffset).r;
     }
  }

  BlurredAO = AccumAO / float(AoBlurSize * AoBlurSize);
#else
  BlurredAO = 1.0f;
#endif


  vec3 sampleVis = vec3(1.0f/5.f);
  /* vec3 sampleVis = vec3(1.f/7.f); */

#if 1
  /*
   *  Fog
   */
  // TODO(Jesse): Can do squared?
  float DistanceToFrag = distance(CameraP, FragPosition.xyz);
  float MaxFogDist = 4500.f;

  float FogContrib = clamp( DistanceToFrag / MaxFogDist, 0.f, 1.f);
  v3 FogColor = V3(0.01f, 0.04f, 0.20f);
  v3 Fog = FogContrib * FogColor;
#else
  v3 Fog = V3(0);
#endif

  /*
   *  Tone-mapping && gamma correction
   */

  vec3 TotalLight = (Diffuse * Lighting) + Bloom;
  /* vec3 TotalLight = (Diffuse * Lighting) * 2.f; */

  // Reinhard tone mapping (pretty bad)
  /* ToneMapped = TotalLight / (TotalLight + vec3(1.0f)); */

  float Exposure = 2.f;
  // tone mapping from https://learnopengl.com/Advanced-Lighting/Bloom
  ToneMapped = vec3(1.0) - exp(-TotalLight * Exposure);

  /* OutColor = vec4(Diffuse, 1.f); */
  /* OutColor = vec4(abs(FragNormal), 1.f); */
  /* OutColor = vec4(KeyLightContrib*10.f, 1.f); */

  /* OutColor = vec4( (KeyLightContrib*ShadowVisibility*100.f), 1.f); */
  /* OutColor = vec4( (ShadowVisibility*100.f), 1.f); */
  /* OutColor = vec4(FogContrib, FogContrib, FogContrib, 1.f) * vec4(FogColor, 1.f); */
  /* OutColor = vec4(ToneMapped, 1.f); */
  /* OutColor = vec4(Lighting, 1.f); */
  /* OutColor = vec4(Bloom, 1.f); */

  // Gamma correction
  OutColor = vec4(pow(ToneMapped, vec3(1.0f / gamma)), 1.0f);
}

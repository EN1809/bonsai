
in vec2 gBufferUV;
out vec4 OutColor;


uniform sampler2D gColor;
uniform sampler2D gPosition;
uniform sampler2D gNormal;
uniform sampler2D shadowMap;
uniform sampler2D Ssao;


uniform s32 LightCount;
uniform r32 LightIndexToUV;
uniform sampler2D LightColors;
uniform sampler2D LightPositions;

uniform mat4 ShadowMVP;

uniform vec3 SunPosition;
uniform vec3 SunColor;
uniform vec3 CameraP;

int AoBlurSize = 4; // size of AO noise texture
float BlurredAO = 0.0f;

vec2 poissonDisk[16] = vec2[](
   vec2( -0.94201624, -0.39906216 ),
   vec2(  0.94558609, -0.76890725 ),
   vec2( -0.09418410, -0.92938870 ),
   vec2(  0.34495938,  0.29387760 ),
   vec2( -0.91588581,  0.45771432 ),
   vec2( -0.81544232, -0.87912464 ),
   vec2( -0.38277543,  0.27676845 ),
   vec2(  0.97484398,  0.75648379 ),

   vec2(  0.44323325, -0.97511554 ),
   vec2(  0.53742981, -0.47373420 ),
   vec2( -0.26496911, -0.41893023 ),
   vec2(  0.79197514,  0.19090188 ),
   vec2( -0.24188840,  0.99706507 ),
   vec2( -0.81409955,  0.91437590 ),
   vec2(  0.19984126,  0.78641367 ),
   vec2(  0.14383161, -0.14100790 )
);



/* vec3 SunPosition = vec3(0.5f, -1.0f, 0.5f); */
/* vec3 SunColor = vec3(1,1,1); */
float Global_LightPower = 0.12f; // 1.0 == full sun
/* float Global_LightPower = 1.0f; // 1.0 == full sun */

// Tuning
  float gamma = 2.2f;
  float materialShininess = 2.0f;
//


vec3 SpecLightingCalc(float AttenuationFactor, vec3 DiffuseColor, vec3 FragToLight, vec3 FragPosition, vec3 FragNormal, vec3 CameraP)
{
  vec3 reflectionVector = reflect(FragToLight, FragNormal);
  vec3 FragToCamera = normalize(FragPosition - CameraP);
  float cosAngle = max(0.0, dot(FragToCamera, reflectionVector));
  float SpecularPower = pow(cosAngle, materialShininess);
  vec3 SpecularLight = DiffuseColor * SpecularPower; // * AttenuationFactor;

  return SpecularLight;
}

vec3 DiffuseLightingCalc(float AttenuationFactor, vec3 DiffuseColor, vec3 FragToLight, vec3 FragNormal, vec3 CameraP)
{
  float LightCosTheta = clamp( dot( FragNormal, FragToLight), 0.0f, 1.0f);
  vec3 DirectLight = (DiffuseColor + SunColor) * LightCosTheta * AttenuationFactor;
  return DirectLight;
}

#define SCR_WIDTH (3840)
#define SCR_HEIGHT (2160)

void main()
{
  vec2 gBufferTextureWidth = vec2(SCR_WIDTH, SCR_HEIGHT);
  ivec2 texelCoord = ivec2(gBufferUV*gBufferTextureWidth);
  vec3 FragPosition = texelFetch(gPosition, texelCoord, 0).rgb;
  r32 DiscardThresh = f32_MAX;
  if (FragPosition.x == DiscardThresh)
  { OutColor = V4(0.2f, 0.2f, 0.2f, 1.0f); return; }

  /* OutColor = V4(FragPosition, 1.f); */
  /* return; */


  vec3 Diffuse = texelFetch(gColor, texelCoord, 0).rgb;
  float Emission = texelFetch(gColor, texelCoord, 0).a;
  /* vec3 Diffuse      = texture(gColor, gBufferUV).rgb; */
  /* float Emission    = texture(gColor, gBufferUV).a; */

  vec3 FragNormal = texelFetch(gNormal, texelCoord, 0).rgb;
  /* vec3 FragNormal   = texture(gNormal, gBufferUV).rgb;   // modelspace */

  vec3 AmbientLight = Diffuse * Global_LightPower * Emission;

  vec3 AccumulatedLight = AmbientLight;

  {
    vec3 FragToLight = normalize(SunPosition);
    float LightAtt = Global_LightPower;
    AccumulatedLight += DiffuseLightingCalc(LightAtt, Diffuse, FragToLight, FragNormal, CameraP);
    /* AccumulatedLight += SpecLightingCalc(LightAtt, Diffuse, FragToLight, FragPosition, FragNormal, CameraP); */
  }



#if 0
  for ( s32 LightIndex = 0;
        LightIndex < LightCount;
        ++LightIndex)
  {
    ivec2 LightUV = ivec2(LightIndex, 0);

    vec3 LightPosition = texelFetch(LightPositions, LightUV, 0).rgb;
    vec3 LightColor = texelFetch(LightColors, LightUV, 0).rgb;

    vec3 FragToLight = normalize(LightPosition - FragPosition);

    float LightCosTheta = clamp( dot( FragNormal, FragToLight), 0.0f, 1.0f);

    float Distance = distance(FragPosition, LightPosition);
    float LightAtt = 1.0f/(Distance*Distance);

    vec3 reflectionVector = reflect(FragToLight, FragNormal);
    vec3 FragToCamera = normalize(FragPosition - CameraP);
    float cosAngle = max(0.0, dot(FragToCamera, reflectionVector));
    float SpecularPower = pow(cosAngle, materialShininess);

    vec3 DirectLight = (Diffuse + LightColor) * LightCosTheta * LightAtt;
    vec3 SpecularLight = (Diffuse + LightColor) * SpecularPower * LightAtt;

    AccumulatedLight += DirectLight + SpecularLight;
  }
#endif

#if USE_SSAO_SHADER
  vec2 texelSize = 1.0 / vec2(textureSize(Ssao, 0));
  float AccumAO = 0.0;

  vec2 hlim = vec2(float(-AoBlurSize) * 0.5 + 0.5);

  for (int i = 0; i < AoBlurSize; ++i) {
     for (int j = 0; j < AoBlurSize; ++j) {
        vec2 TexOffset = (hlim + vec2(float(i), float(j))) * texelSize;
        AccumAO += texture(Ssao, gBufferUV + TexOffset).r;
     }
  }

  BlurredAO = AccumAO / float(AoBlurSize * AoBlurSize);
#else
  BlurredAO = 1.0f;
#endif


  vec3 Visibility = vec3(1.0f);
  vec3 sampleVis = vec3(1.0f/20.f);

#if USE_SHADOW_MAPPING
  /*
   *  Shadow Mapping
   */
  vec4 FragPShadowScreenSpace = ShadowMVP * vec4(FragPosition, 1.0f);
  float fragPDepth = FragPShadowScreenSpace.z;

  float acneBias = 0.00000001f; // Fix acne

  /* acneBias = 0.0f; */
  /* float ShadowDepth = texture(shadowMap, vec3(FragPShadowScreenSpace.xy, FragPShadowScreenSpace.z/FragPShadowScreenSpace.w)).x + acneBias; */
  /* float ShadowDepth = texture(shadowMap, FragPShadowScreenSpace.xy).x + acneBias; */
  /* if ( fragPDepth > ShadowDepth ) */
  /*   Visibility = vec3(0.1f); */

  /* float Visibility = 1.0f; */

#if 0

  /* float sampleDepth = texture(shadowMap, FragPShadowScreenSpace.xy).x; */
  /* Visibility = vec3(sampleDepth, 0.f, 0.f); */

  float sampleDepth = texture(shadowMap, FragPShadowScreenSpace.xy).x;
  /* Visibility = sampleDepth; */
  if ( fragPDepth > (sampleDepth+acneBias) ) { Visibility = vec3(0.25f); }

#else
  for (int index = 0; index < 16; index++)
  {
    // TODO(Jesse): Does this produce better results using texelFetch?
    float sampleDepth = texture(shadowMap, vec2(FragPShadowScreenSpace.xy + poissonDisk[index]/5000.0) ).x;
    if ( fragPDepth > sampleDepth ) { Visibility -= sampleVis; }
  }
#endif

#endif

  /*
   *  Tone-mapping && gamma correction
   */
  vec3 TotalLight = BlurredAO * Visibility * AccumulatedLight;


  // Reinhard tone mapping
  vec3 ToneMapped = TotalLight / (TotalLight + vec3(1.0f));

  // Gamma correction
  OutColor = vec4(pow(ToneMapped, vec3(1.0f / gamma)), 1.0f);
}

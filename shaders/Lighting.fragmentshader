
in vec2 gBufferUV;
out vec4 OutColor;


uniform sampler2D gColor;
uniform sampler2D gPosition;
uniform sampler2D gNormal;
uniform sampler2D shadowMap;
uniform sampler2D Ssao;


uniform s32 LightCount;
uniform r32 LightIndexToUV;
uniform sampler2D LightColors;
uniform sampler2D LightPositions;

uniform mat4 ShadowMVP;

uniform vec3 SunPosition;
uniform vec3 SunColor;
uniform vec3 CameraP;

int AoBlurSize = 4; // size of AO noise texture
float BlurredAO = 0.0f;


// NOTE(Jesse): Better shader noise function for when I need it : https://www.shadertoy.com/view/4djSRW

// NOTE(Jesse): These are done, leaving here for posterity for a bit.
// DONE(Jesse): Tune the sun color & ambient light color to be orange/teal
// DONE(Jesse): Tune the sun color & ambient light intensities to be 10:1
// DONE(Jesse): Add back-lighting, which is a light from the opposite direciton of the sun.  
// DONE(Jesse): Don't modulate key-light by SSAO
//
// https://www.youtube.com/watch?v=-pdSjBPH3zM
//
/* vec3 SunPosition = vec3(0.5f, -1.0f, 0.5f); */
/* vec3 SunColor = vec3(1,1,1); */
/* float Global_LightPower = 0.0005f; // 0.005 == dusk */
/* float Global_LightPower = 0.005f; // 1.000 == full sun */
/* float Global_LightPower = 0.05f; */
float Global_LightPower = 0.5f;
vec3 AmbientLightColor = V3(0.25, 0.4, 0.7);
/* float Global_LightPower = 1.0f; // 1.0 == full sun */

// Tuning
  float gamma = 2.2f;
  float materialShininess = 2.0f;
//


vec3 SpecLightingCalc(float AttenuationFactor, vec3 DiffuseColor, vec3 FragToLight, vec3 FragPosition, vec3 FragNormal, vec3 CameraP)
{
  vec3 reflectionVector = reflect(FragToLight, FragNormal);
  vec3 FragToCamera = normalize(FragPosition - CameraP);
  float cosAngle = max(0.0, dot(FragToCamera, reflectionVector));
  float SpecularPower = pow(cosAngle, materialShininess);
  vec3 SpecularLight = DiffuseColor * SpecularPower; // * AttenuationFactor;

  return SpecularLight;
}

vec3 DiffuseLightingCalc(float AttenuationFactor, vec3 DiffuseColor, vec3 FragToLight, vec3 FragNormal, vec3 CameraP)
{
  float LightCosTheta = clamp( dot( FragNormal, FragToLight), 0.0f, 1.0f);
  vec3 DirectLight = (DiffuseColor + SunColor) * LightCosTheta * AttenuationFactor;
  return DirectLight;
}


void main()
{
  vec2 gBufferTextureDim = vec2(SCR_WIDTH, SCR_HEIGHT);
  ivec2 texelCoord = ivec2(gBufferUV*gBufferTextureDim);
  vec4 FragPosition = texelFetch(gPosition, texelCoord, 0);

  vec3 ToneMapped;
  vec3 KeyLightContrib = vec3(0.f);
  vec3 BackLightContrib = vec3(0.f);
  vec3 CameraToFrag = normalize(FragPosition.xyz - CameraP); // TODO(Jesse): Pass this to the lighting calc that needs it

  vec3 Diffuse = texelFetch(gColor, texelCoord, 0).rgb;
  vec3 FragNormal = texelFetch(gNormal, texelCoord, 0).rgb;
  /* vec3 FragNormal   = texture(gNormal, gBufferUV).rgb; */

  vec3 ShadowVisibility = vec3(1.0f);

  r32 DiscardThresh = f32_MAX;
  if (FragPosition.x == DiscardThresh)
  {
    ToneMapped = V3(0.2f, 0.2f, 0.2f);
  }
  else
  {
    /* OutColor = V4(FragPosition, 1.f); */
    /* return; */


    /* vec3 Diffuse = texelFetch(gColor, texelCoord, 0).rgb; */
    float Emission = texelFetch(gColor, texelCoord, 0).a;
    /* vec3 Diffuse      = texture(gColor, gBufferUV).rgb; */
    /* float Emission    = texture(gColor, gBufferUV).a; */

    /* vec3 AmbientLight = AmbientLightColor * Diffuse * Global_LightPower*0.1f * Emission; */

    {
      vec3 FragToLight = normalize(SunPosition);
      vec3 LightToFrag = -FragToLight;

      float LightAtt = Global_LightPower;
      BackLightContrib = DiffuseLightingCalc(0.15f*LightAtt, Diffuse, LightToFrag, FragNormal, CameraP);
      KeyLightContrib = DiffuseLightingCalc(LightAtt, Diffuse, FragToLight, FragNormal, CameraP);
      /* KeyLightContrib += SpecLightingCalc(LightAtt, Diffuse, FragToLight, FragPosition, FragNormal, CameraP); */
    }



    vec3 PointLightsContrib = V3(0.f);
#if 1
    for ( s32 LightIndex = 0;
          LightIndex < LightCount;
          ++LightIndex)
    {
      ivec2 LightUV = ivec2(LightIndex, 0);

      vec3 LightPosition = texelFetch(LightPositions, LightUV, 0).rgb;
      vec3 LightColor = texelFetch(LightColors, LightUV, 0).rgb;

      vec3 FragToLight = normalize(LightPosition - FragPosition.xyz);

      float LightCosTheta = clamp( dot( FragNormal, FragToLight), 0.0f, 1.0f);

      float Distance = distance(FragPosition.xyz, LightPosition);
      float LightAtt = 1.0f/(Distance*Distance);

      vec3 reflectionVector = reflect(FragToLight, FragNormal);
      vec3 FragToCamera = normalize(FragPosition.xyz - CameraP);
      float cosAngle = max(0.0, dot(FragToCamera, reflectionVector));
      float SpecularPower = pow(cosAngle, materialShininess);

      vec3 DirectLight = (Diffuse + LightColor) * LightCosTheta * LightAtt;
      vec3 SpecularLight = (Diffuse + LightColor) * SpecularPower * LightAtt;

      PointLightsContrib += DirectLight + SpecularLight;
    }
#endif

#if USE_SSAO_SHADER
    vec2 texelSize = 1.0 / vec2(textureSize(Ssao, 0));
    float AccumAO = 0.0;

    vec2 hlim = vec2(float(-AoBlurSize) * 0.5 + 0.5);

    for (int i = 0; i < AoBlurSize; ++i) {
       for (int j = 0; j < AoBlurSize; ++j) {
          vec2 TexOffset = (hlim + vec2(float(i), float(j))) * texelSize;
          AccumAO += texture(Ssao, gBufferUV + TexOffset).r;
       }
    }

    BlurredAO = AccumAO / float(AoBlurSize * AoBlurSize);
#else
    BlurredAO = 1.0f;
#endif


    vec3 sampleVis = vec3(1.0f/5.f);
    /* vec3 sampleVis = vec3(1.f/7.f); */

#if USE_SHADOW_MAPPING
    /*
     *  Shadow Mapping
     */
    float acneBias = 0.0001f; // Fix acne

    vec4 FragPShadowSpace = ShadowMVP * vec4(FragPosition.xyz, 1.f);
    float FragDepth = FragPShadowSpace.z - acneBias;
    /* OutColor = vec4(FragDepth, FragDepth, FragDepth, 1.f); */
    /* OutColor = FragPShadowSpace; */
    /* return; */


    v2 ShadowMapUVStep = vec2(1.f)/vec2(float(SHADOW_MAP_RESOLUTION_X), float(SHADOW_MAP_RESOLUTION_Y));

    float ShadowSampleDepth = texture(shadowMap, FragPShadowSpace.xy ).x + acneBias;
    if ( FragDepth > ShadowSampleDepth ) { ShadowVisibility -= vec3(1.f); }

    // NOTE(Jesse): This is misguided.  The correct thing to do is to write
    // shadow information to a buffer, then sample that buffer using a box filter
    // (or some other blur function).  The reason to do it that way instead of
    // directly here is that for each sample you take here, you'd have to
    // recompute the actual shadow map value at the sample pos, which would be
    // much too expensive even at small sample rates.
    //
    // I'm going to leave this here, but it causes flashing when the sun rotates
    // such that the number of samples this hits true branches for change for the
    // whole scene.
    //
    // Might be fine if the sun location was a fixed point, but that seems lame.
    //
#if 0
    // TODO(Jesse): Does this produce better results using texelFetch?
    vec2 Mapped = vec2(FragPShadowSpace.xy + vec2(ShadowMapUVStep.x, 0.f));
    ShadowSampleDepth = texture(shadowMap, Mapped).x + acneBias;
    if ( FragDepth > ShadowSampleDepth ) { ShadowVisibility -= sampleVis; }

    Mapped = vec2(FragPShadowSpace.xy + vec2(-ShadowMapUVStep.x, 0.f));
    ShadowSampleDepth = texture(shadowMap, Mapped).x + acneBias;
    if ( FragDepth > ShadowSampleDepth ) { ShadowVisibility -= sampleVis; }

    Mapped = vec2(FragPShadowSpace.xy + vec2(0.f, ShadowMapUVStep.y));
    ShadowSampleDepth = texture(shadowMap, Mapped).x + acneBias;
    if ( FragDepth > ShadowSampleDepth ) { ShadowVisibility -= sampleVis; }

    Mapped = vec2(FragPShadowSpace.xy + vec2(0.f, -ShadowMapUVStep.y));
    ShadowSampleDepth = texture(shadowMap, Mapped).x + acneBias;
    if ( FragDepth > ShadowSampleDepth ) { ShadowVisibility -= sampleVis; }
#endif

    /* OutColor = vec4(vec3(FragDepth < ShadowSampleDepth ), 1.f); */
    /* return; */

#endif

    /* ShadowVisibility = max(ShadowVisibility, vec3(Global_LightPower)); */
    /* OutColor = vec4(ShadowVisibility, 1.f); */
    /* return; */

#if 1
    /*
     *  Fog
     */
    // TODO(Jesse): Can do squared?
    float DistanceToFrag = distance(CameraP, FragPosition.xyz);
    float MaxFogDist = 4500.f;

    float FogContrib = clamp( DistanceToFrag / MaxFogDist, 0.f, 1.f);
    v3 FogColor = V3(0.01f, 0.04f, 0.20f);
    v3 Fog = FogContrib * FogColor;
#else
    v3 Fog = V3(0);
#endif

    /*
     *  Tone-mapping && gamma correction
     */

    vec3 TotalLight = (KeyLightContrib*ShadowVisibility) +
                      (PointLightsContrib) +
                      (BlurredAO*BackLightContrib) +
                      Fog;

    /* vec3 TotalLight = (KeyLightContrib) + */
    /*                   (PointLightsContrib) + */
    /*                   (BlurredAO*BackLightContrib) + */
    /*                   Fog; */


    // Reinhard tone mapping
    ToneMapped = TotalLight / (TotalLight + vec3(1.0f));
  }

  float Shine = 0.f;
  /* Shine = clamp(pow(dot(SunPosition, CameraToFrag), 2.f), 0.f, 1.f); */


  /* OutColor = vec4(Diffuse, 1.f); */
  /* OutColor = vec4(abs(FragNormal), 1.f); */
  /* OutColor = vec4(KeyLightContrib*10.f, 1.f); */

  /* OutColor = vec4( (KeyLightContrib*ShadowVisibility*100.f), 1.f); */
  /* OutColor = vec4( (ShadowVisibility*100.f), 1.f); */
  /* OutColor = vec4(FogContrib, FogContrib, FogContrib, 1.f) * vec4(FogColor, 1.f); */
  /* OutColor = vec4(ToneMapped, 1.f); */

  // Gamma correction
  OutColor = vec4(pow(ToneMapped, vec3(1.0f / gamma)), 1.0f) + Shine;
}

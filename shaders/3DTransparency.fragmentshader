
in vec3 vertexP_worldspace;
in vec3 vertexN_worldspace;
in vec4 MaterialColor;

uniform sampler2D gBufferDepthTexture;

uniform bool BravoilMyersOIT;
uniform bool BravoilMcGuireOIT;

layout (location = 0) out vec4 ColorAccumulation;
layout (location = 1) out vec4 Count;


float Far = 5000.f;
float Near = 0.25f;


float zDivPow(float z, float denom, float power)
{
  return pow(z/denom, power);
}

float Eq7(float LinearDepth, float Alpha)
{
  float absZ = abs(LinearDepth);
  float denom = 10e-5 + zDivPow(absZ, 5.f, 2.f) + zDivPow(absZ, 200.f, 6.f);
  return Alpha * ( max(10e-2, min(30e3, 10.f / denom )) );
}

float Eq8(float LinearDepth, float Alpha)
{
  float absZ = abs(LinearDepth);
  float denom = 10e-5 + zDivPow(absZ, 10.f, 3.f) + zDivPow(absZ, 200.f, 6.f);
  return Alpha * ( max(10e-2, min(30e3, 10.f / denom )) );
}

float Eq9(float LinearDepth, float Alpha)
{
  float absZ = abs(LinearDepth);
  float denom = 10e-5 + zDivPow(absZ, 200.f, 4.f);
  return Alpha * ( max(10e-2, min(30e3, 0.03f / denom )) );
}


float Cube(float A)
{
  return A*A*A;
}

float RandomFuncFromPaper(float FragDepth)
{
  float Result = (2.0 * Near) / (Far + Near - FragDepth * (Far - Near));
  return Result;
}

float Eq10(float Depth, float Alpha)
{
  float absZ = abs(Depth);
  float denom = 10e-5 + zDivPow(absZ, 200.f, 4.f);
  return Alpha * ( max(10e-2, 30e3 * Cube(1.f-RandomFuncFromPaper(absZ)) ));
}

void main()
{
  v2 UV = gl_FragCoord.xy / V2(SCR_WIDTH, SCR_HEIGHT);
  float gBufferDepth = texture(gBufferDepthTexture, UV).r;
  float FragDepth = gl_FragCoord.z;

  if (FragDepth < gBufferDepth)
  {
    if (BravoilMyersOIT)
    {
      ColorAccumulation = MaterialColor * MaterialColor.a;
      Count = V4(1);
    }

    if (BravoilMcGuireOIT)
    {
      r32 Coverage = MaterialColor.a;
      /* ColorAccumulation = MaterialColor * Eq7(Linearize(FragDepth, 500.f, 0.1f), Coverage); */
      /* ColorAccumulation = MaterialColor * Eq7(FragDepth, Coverage); */
      ColorAccumulation = MaterialColor * Linearize(FragDepth, 500.f, 0.1f);
      Count = v4(Coverage);
    }
  }
}

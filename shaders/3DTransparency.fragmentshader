
in vec3 vertexP_worldspace;
in vec3 vertexN_worldspace;
in vec4 MaterialColor;

uniform sampler2D gBufferDepthTexture;

layout (location = 0) out vec4 ColorAccumulation;
layout (location = 1) out vec4 Count;


float Far = 10000.f;
float Near = 1.f;

float Linearize(float PixelDepth)
{
  float Result = (2.0 * Near) / (Far + Near - PixelDepth * (Far - Near));
  return Result;
}

void main()
{
  float gBufferDepth = texture(gBufferDepthTexture, gl_FragCoord.xy).r;
  float PixelDepth = gl_FragCoord.z;

  /* ColorAccumulation = vec4(PixelDepth,gBufferDepth, 0.f, 1.f); */
  /* ColorAccumulation = vec4(PixelDepth,PixelDepth,PixelDepth, 1.f); */

  Count = vec4(0.f);

  /* if (gBufferDepth > 0.f) */
  /* { */
  /*   ColorAccumulation = vec4(1.f, 1.f, 0.f, 1.f); */
  /* } */
  /* if (gBufferDepth > 1.f) */
  /* { */
  /*   ColorAccumulation = vec4(1.f, 0.f, 0.f, 1.f); */
  /* } */
  /* else if (gBufferDepth > 10.f) */
  /* { */
  /*   ColorAccumulation = vec4(0.f, 1.f, 0.f, 1.f); */
  /* } */
  /* else if (gBufferDepth > 100.f) */
  /* { */
  /*   ColorAccumulation = vec4(0.f, 0.f, 1.f, 1.f); */
  /* } */
  /* else */
  /* { */
  /*   ColorAccumulation = vec4(1.f, 1.f, 1.f, 1.f); */
  /* } */

  float Value = gBufferDepth;
  /* float Value = Linearize(gBufferDepth); */
  /* float Value = Linearize(PixelDepth); */
  ColorAccumulation = vec4(Value, Value, Value, 1.f);

  return;

#if 0
  if (PixelDepth < gBufferDepth)
  {
    /* ColorAccumulation = MaterialColor * FragDepth; */
    /* ColorAccumulation = MaterialColor * PixelDepth; */
    /* Count = V4(1); */

    Count = V4(1.0f);
    ColorAccumulation = V4(1.f);
  }
  else
  {
    Count = V4(0.0f);
    ColorAccumulation = V4(0.f);
  }
#endif
}
